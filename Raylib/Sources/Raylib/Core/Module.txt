// Window-related functions
bool IsWindowResized(void);                                             // Check if window has been resized last frame
bool IsWindowState(unsigned int flag);                                  // Check if one specific window flag is enabled
void SetWindowState(unsigned int flags);                                // Set window configuration state using flags
void ClearWindowState(unsigned int flags);                              // Clear window configuration state flags
void ToggleFullscreen(void);                                            // Toggle window state: fullscreen/windowed (only PLATFORM_DESKTOP)
void MaximizeWindow(void);                                              // Set window state: maximized, if resizable (only PLATFORM_DESKTOP)
void MinimizeWindow(void);                                              // Set window state: minimized, if resizable (only PLATFORM_DESKTOP)
void RestoreWindow(void);                                               // Set window state: not minimized/maximized (only PLATFORM_DESKTOP)
void SetWindowIcon(Image image);                                        // Set icon for window (only PLATFORM_DESKTOP)
void SetWindowMinSize(int width, int height);                           // Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)

// Drawing-related functions
void BeginMode3D(Camera3D camera);                                      // Initializes 3D mode with custom camera (3D)
void EndMode3D(void);                                                   // Ends 3D mode and returns to default 2D orthographic mode
void BeginTextureMode(RenderTexture2D target);                          // Initializes render texture for drawing
void EndTextureMode(void);                                              // Ends drawing to render texture
void BeginShaderMode(Shader shader);                                    // Begin custom shader drawing
void EndShaderMode(void);                                               // End custom shader drawing (use default shader)
void BeginBlendMode(int mode);                                          // Begin blending mode (alpha, additive, multiplied)
void EndBlendMode(void);                                                // End blending mode (reset to default: alpha blending)
void BeginScissorMode(int x, int y, int width, int height);             // Begin scissor mode (define screen area for following drawing)
void EndScissorMode(void);                                              // End scissor mode
void BeginVrStereoMode(VrStereoConfig config);                          // Begin stereo rendering
void EndVrStereoMode(void);                                             // End stereo rendering

// VR stereo config functions for VR simulator
VrStereoConfig LoadVrStereoConfig(VrDeviceInfo device);                 // Load VR stereo config for VR simulator device parameters
void UnloadVrStereoConfig(VrStereoConfig config);                       // Unload VR stereo config

// Shader management functions
// NOTE: Shader functionality is not available on OpenGL 1.1
Shader LoadShader(const char *vsFileName, const char *fsFileName);      // Load shader from files and bind default locations
Shader LoadShaderFromMemory(const char *vsCode, const char *fsCode);    // Load shader from code strings and bind default locations
int GetShaderLocation(Shader shader, const char *uniformName);          // Get shader uniform location
int GetShaderLocationAttrib(Shader shader, const char *attribName);     // Get shader attribute location
void SetShaderValue(Shader shader, int locIndex, const void *value, int uniformType);               // Set shader uniform value
void SetShaderValueV(Shader shader, int locIndex, const void *value, int uniformType, int count);   // Set shader uniform value vector
void SetShaderValueMatrix(Shader shader, int locIndex, Matrix mat);     // Set shader uniform value (matrix 4x4)
void SetShaderValueTexture(Shader shader, int locIndex, Texture2D texture); // Set shader uniform value for texture (sampler2d)
void UnloadShader(Shader shader);                                       // Unload shader from GPU memory (VRAM)

// Screen-space-related functions
Ray GetMouseRay(Vector2 mousePosition, Camera camera);                  // Returns a ray trace from mouse position
Matrix GetCameraMatrix(Camera camera);                                  // Returns camera transform matrix (view matrix)
Matrix GetCameraMatrix2D(Camera2D camera);                              // Returns camera 2d transform matrix
Vector2 GetWorldToScreen(Vector3 position, Camera camera);              // Returns the screen space position for a 3d world space position
Vector2 GetWorldToScreenEx(Vector3 position, Camera camera, int width, int height); // Returns size position for a 3d world space position

// Misc. functions
int GetRandomValue(int min, int max);                                   // Returns a random value between min and max (both included)
void TakeScreenshot(const char *fileName);                              // Takes a screenshot of current screen (filename extension defines format)
void SetConfigFlags(unsigned int flags);                                // Setup init configuration flags (view FLAGS)

void TraceLog(int logLevel, const char *text, ...);                     // Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR)
void SetTraceLogLevel(int logLevel);                                    // Set the current threshold (minimum) log level
void *MemAlloc(int size);                                               // Internal memory allocator
void *MemRealloc(void *ptr, int size);                                  // Internal memory reallocator
void MemFree(void *ptr);                                                // Internal memory free

// Set custom callbacks
// WARNING: Callbacks setup is intended for advance users
void SetTraceLogCallback(TraceLogCallback callback);                    // Set custom trace log
void SetLoadFileDataCallback(LoadFileDataCallback callback);            // Set custom file binary data loader
void SetSaveFileDataCallback(SaveFileDataCallback callback);            // Set custom file binary data saver
void SetLoadFileTextCallback(LoadFileTextCallback callback);            // Set custom file text data loader
void SetSaveFileTextCallback(SaveFileTextCallback callback);            // Set custom file text data saver

// Files management functions
unsigned char *LoadFileData(const char *fileName, unsigned int *bytesRead);     // Load file data as byte array (read)
void UnloadFileData(unsigned char *data);                               // Unload file data allocated by LoadFileData()
bool SaveFileData(const char *fileName, void *data, unsigned int bytesToWrite); // Save data to file from byte array (write), returns true on success
char *LoadFileText(const char *fileName);                               // Load text data from file (read), returns a '\0' terminated string
void UnloadFileText(unsigned char *text);                               // Unload file text data allocated by LoadFileText()
bool SaveFileText(const char *fileName, char *text);                    // Save text data to file (write), string must be '\0' terminated, returns true on success
bool FileExists(const char *fileName);                                  // Check if file exists
bool DirectoryExists(const char *dirPath);                              // Check if a directory path exists
bool IsFileExtension(const char *fileName, const char *ext);            // Check file extension (including point: .png, .wav)
const char *GetFileExtension(const char *fileName);                     // Get pointer to extension for a filename string (includes dot: ".png")
const char *GetFileName(const char *filePath);                          // Get pointer to filename for a path string
const char *GetFileNameWithoutExt(const char *filePath);                // Get filename string without extension (uses static string)
const char *GetDirectoryPath(const char *filePath);                     // Get full path for a given fileName with path (uses static string)
const char *GetPrevDirectoryPath(const char *dirPath);                  // Get previous directory path for a given path (uses static string)
const char *GetWorkingDirectory(void);                                  // Get current working directory (uses static string)
char **GetDirectoryFiles(const char *dirPath, int *count);              // Get filenames in a directory path (memory should be freed)
void ClearDirectoryFiles(void);                                         // Clear directory files paths buffers (free memory)
bool ChangeDirectory(const char *dir);                                  // Change working directory, return true on success
bool IsFileDropped(void);                                               // Check if a file has been dropped into window
char **GetDroppedFiles(int *count);                                     // Get dropped files names (memory should be freed)
void ClearDroppedFiles(void);                                           // Clear dropped files paths buffer (free memory)
long GetFileModTime(const char *fileName);                              // Get file modification time (last write time)

unsigned char *CompressData(unsigned char *data, int dataLength, int *compDataLength);        // Compress data (DEFLATE algorithm)
unsigned char *DecompressData(unsigned char *compData, int compDataLength, int *dataLength);  // Decompress data (DEFLATE algorithm)

// Persistent storage management
bool SaveStorageValue(unsigned int position, int value);                // Save integer value to storage file (to defined position), returns true on success
int LoadStorageValue(unsigned int position);                            // Load integer value from storage file (from defined position)

void OpenURL(const char *url);                                          // Open URL with default system browser (if available)

// Input-related functions: gamepads
bool IsGamepadAvailable(int gamepad);                                   // Detect if a gamepad is available
bool IsGamepadName(int gamepad, const char *name);                      // Check gamepad name (if available)
const char *GetGamepadName(int gamepad);                                // Return gamepad internal name id
bool IsGamepadButtonPressed(int gamepad, int button);                   // Detect if a gamepad button has been pressed once
bool IsGamepadButtonDown(int gamepad, int button);                      // Detect if a gamepad button is being pressed
bool IsGamepadButtonReleased(int gamepad, int button);                  // Detect if a gamepad button has been released once
bool IsGamepadButtonUp(int gamepad, int button);                        // Detect if a gamepad button is NOT being pressed
int GetGamepadButtonPressed(void);                                      // Get the last gamepad button pressed
int GetGamepadAxisCount(int gamepad);                                   // Return gamepad axis count for a gamepad
float GetGamepadAxisMovement(int gamepad, int axis);                    // Return axis movement value for a gamepad axis
int SetGamepadMappings(const char *mappings);                           // Set internal gamepad mappings (SDL_GameControllerDB)

// Input-related functions: mouse
void SetMouseOffset(int offsetX, int offsetY);                          // Set mouse offset
void SetMouseScale(float scaleX, float scaleY);                         // Set mouse scaling
void SetMouseCursor(int cursor);                                        // Set mouse cursor

// Input-related functions: touch
int GetTouchX(void);                                                    // Returns touch position X for touch point 0 (relative to screen size)
int GetTouchY(void);                                                    // Returns touch position Y for touch point 0 (relative to screen size)
Vector2 GetTouchPosition(int index);                                    // Returns touch position XY for a touch point index (relative to screen size)

// Gestures and Touch Handling Functions (Module: gestures)
void SetGesturesEnabled(unsigned int flags);                            // Enable a set of gestures using flags
bool IsGestureDetected(int gesture);                                    // Check if a gesture have been detected
int GetGestureDetected(void);                                           // Get latest detected gesture
int GetTouchPointsCount(void);                                          // Get touch points count
float GetGestureHoldDuration(void);                                     // Get gesture hold time in milliseconds
Vector2 GetGestureDragVector(void);                                     // Get gesture drag vector
float GetGestureDragAngle(void);                                        // Get gesture drag angle
Vector2 GetGesturePinchVector(void);                                    // Get gesture pinch delta
float GetGesturePinchAngle(void);                                       // Get gesture pinch angle

// Camera System Functions (Module: camera)
void SetCameraMode(Camera camera, int mode);                            // Set camera mode (multiple camera modes available)
void UpdateCamera(Camera *camera);                                      // Update camera position for selected mode

void SetCameraPanControl(int keyPan);                                   // Set camera pan key to combine with mouse movement (free camera)
void SetCameraAltControl(int keyAlt);                                   // Set camera alt key to combine with mouse movement (free camera)
void SetCameraSmoothZoomControl(int keySmoothZoom);                     // Set camera smooth zoom key to combine with mouse (free camera)
void SetCameraMoveControls(int frontKey, int backKey,
						   int rightKey, int leftKey,
						   int upKey, int downKey);                     // Set camera move controls (1st person and 3rd person cameras)
